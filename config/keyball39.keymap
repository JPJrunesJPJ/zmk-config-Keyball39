/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE        0
#define NAV         1
#define NUM         2
#define SYM         3
#define FUN         4
#define WIN         5
#define BASE_OSM    6
#define NAV_OSM     7
#define NUM_OSM     8
#define SYM_OSM     9
#define FUN_OSM     10
#define WIN_OSM     11
#define FUNX        12
#define FUNX_OSM    13
#define ADJ         14

// Enhanced behavior configurations
&lt {
    tapping-term-ms = <280>;
    flavor = "balanced";
    quick-tap-ms = <175>;
    global-quick-tap;
};

&mt {
    tapping-term-ms = <280>;
    flavor = "balanced";
    quick-tap-ms = <175>;
    global-quick-tap;
    retro-tap;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
    shift-continuation = <UNDERSCORE>;
};

/ {
    combos {
        compatible = "zmk,combos";
        
        // Universal escape
        combo_esc {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };

        // Quick tab access
        combo_tab {
            timeout-ms = <40>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
        };

        // Quick delete
        combo_del {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp DEL>;
        };

        // Enhanced caps word
        combo_caps {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };

        // Programming brackets
        combo_lbkt {
            timeout-ms = <30>;
            key-positions = <1 2>;
            bindings = <&kp LBKT>;
        };

        combo_rbkt {
            timeout-ms = <30>;
            key-positions = <2 3>;
            bindings = <&kp RBKT>;
        };

        combo_lbrc {
            timeout-ms = <30>;
            key-positions = <11 12>;
            bindings = <&kp LBRC>;
        };

        combo_rbrc {
            timeout-ms = <30>;
            key-positions = <12 13>;
            bindings = <&kp RBRC>;
        };

        // Alt+Tab shortcuts
        combo_alt_tab {
            timeout-ms = <40>;
            key-positions = <1 11>;
            bindings = <&kp LA(TAB)>;
        };

        combo_alt_shift_tab {
            timeout-ms = <40>;
            key-positions = <1 21>;
            bindings = <&kp LA(LS(TAB))>;
        };

        // Windows shortcuts
        combo_win_left {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LG(LEFT)>;
            layers = <NAV NAV_OSM>;
        };

        combo_win_right {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LG(RIGHT)>;
            layers = <NAV NAV_OSM>;
        };

        // Windows management layer
        combo_win_layer {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sl WIN>;
            layers = <BASE NAV NUM SYM FUN FUNX>;
        };

        combo_win_layer_osm {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sl WIN_OSM>;
            layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM>;
        };

        // Adjustment layer
        combo_adj {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&mo ADJ>;
        };

        // Emergency return
        combo_base_return {
            timeout-ms = <100>;
            key-positions = <0 9>;
            bindings = <&to BASE>;
        };
    };

    macros {
        // Programming shortcuts
        arrow_fn: arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE>;
        };

        console_log: console_log {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp S &kp O &kp L &kp E &kp DOT &kp L &kp O &kp G &kp LPAR>;
        };

        // Windows shortcuts
        win_run: win_run {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(R)>;
        };

        win_settings: win_settings {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(I)>;
        };

        win_lock: win_lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>;
        };

        // Media control macros
        teams_mute: teams_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(M))>;
        };

        spotify_play_pause: spotify_play_pause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C_PP>;
        };

        discord_mute: discord_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(M))>;
        };

        discord_deafen: discord_deafen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(D))>;
        };

        obs_start_stop: obs_start_stop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F13>;
        };

        obs_pause: obs_pause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F14>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base layer with home row mods
        base_layer {
            bindings = <
&kp Q           &kp W           &kp E            &kp R             &kp T              &kp Y         &kp U             &kp I            &kp O           &kp P
&mt LGUI A      &mt LALT S      &mt LCTRL D      &mt LSHFT F       &kp G              &kp H         &mt RSHFT J       &mt RCTRL K      &mt RALT L      &mt RGUI SEMI
&kp Z           &kp X           &kp C            &kp V             &kp B              &kp N         &kp M             &kp COMMA        &kp DOT         &kp FSLH
                                                 &lt NUM ESC       &lt NAV SPACE      &kp RET       &lt SYM BSPC      &sl FUN
            >;
        };

        nav_layer {
            bindings = <
&kp ESC         &kp TAB         &kp LC(T)        &kp LC(W)         &kp LC(R)          &kp PG_UP     &kp HOME          &kp UP           &kp END         &kp DEL
&sk LGUI        &sk LALT        &sk LCTRL        &sk LSHFT         &kp LC(G)          &kp PG_DN     &kp LEFT          &kp DOWN         &kp RIGHT       &kp SQT
&kp LC(Z)       &kp LC(X)       &kp LC(C)        &kp LC(V)         &kp LC(F)          &kp INS       &kp K_CMENU          &kp PSCRN        &kp SCROLLLOCK  &kp BSLH
                                                 &trans            &trans             &sl WIN       &trans            &trans
            >;
        };

        num_layer {
            bindings = <
&kp LBKT        &kp N7          &kp N8           &kp N9            &kp RBKT           &kp F12       &kp F7            &kp F8           &kp F9          &kp PSCRN
&kp SQT         &kp N4          &kp N5           &kp N6            &kp EQUAL          &kp F11       &kp F4            &kp F5           &kp F6          &kp SCROLLLOCK
&kp GRAVE       &kp N1          &kp N2           &kp N3            &kp BSLH           &kp F10       &kp F1            &kp F2           &kp F3          &kp PAUSE_BREAK
                                                 &trans            &kp N0             &trans        &kp MINUS         &kp DOT
            >;
        };

        sym_layer {
            bindings = <
&kp LBRC        &kp AMPS        &kp ASTRK        &kp LPAR          &kp RBRC           &arrow_fn     &kp UNDER         &kp PLUS         &kp PIPE        &kp TILDE
&kp DQT         &kp DLLR        &kp PRCNT        &kp CARET         &kp PLUS           &trans        &sk RSHFT         &sk RCTRL        &sk RALT        &sk RGUI
&kp TILDE       &kp EXCL        &kp AT           &kp HASH          &kp PIPE           &console_log  &kp MINUS         &kp EQUAL        &kp COLON       &kp QMARK
                                                 &kp LPAR          &kp UNDER          &trans        &trans            &trans
            >;
        };

        fun_layer {
            bindings = <
&kp F12         &kp F7          &kp F8           &kp F9            &kp PSCRN          &kp C_BRI_UP  &kp C_VOL_UP      &kp C_NEXT       &trans          &sl FUNX
&kp F11         &kp F4          &kp F5           &kp F6            &kp SLCK          &kp C_BRI_DN  &kp C_VOL_DN      &kp C_PREV       &kp C_PP        &trans
&kp F10         &kp F1          &kp F2           &kp F3            &kp PAUSE_BREAK    &trans        &kp C_MUTE        &trans           &trans          &trans
                                                 &kp SPACE         &kp TAB            &trans        &kp DEL           &trans
            >;
        };

        win_layer {
            bindings = <
&kp LG(TAB)     &kp LA(TAB)     &kp LC(LA(TAB))  &kp LC(LG(RIGHT)) &kp LC(LG(D))      &kp LA(LS(TAB)) &kp LG(N7)      &kp LG(N8)       &kp LG(N9)      &win_lock
&kp LG(LEFT)    &kp LG(DOWN)    &kp LG(UP)       &kp LG(RIGHT)     &kp LG(D)          &kp LG(Z)     &kp LG(N4)        &kp LG(N5)       &kp LG(N6)      &win_settings
&win_run        &kp LG(X)       &kp LG(C)        &kp LG(V)         &kp LC(LG(F4))     &kp LG(M)     &kp LG(N1)        &kp LG(N2)       &kp LG(N3)      &kp LG(SEMI)
                                                 &kp LC(LG(LEFT))  &trans             &kp LG(N0)    &trans            &trans
            >;
        };

        base_osm_layer {
            bindings = <
&kp Q           &kp W           &kp E            &kp R             &kp T              &kp Y         &kp U             &kp I            &kp O           &kp P
&kp A           &kp S           &kp D            &kp F             &kp G              &kp H         &kp J             &kp K            &kp L           &kp SEMI
&kp Z           &kp X           &kp C            &kp V             &kp B              &kp N         &kp M             &kp COMMA        &kp DOT         &kp FSLH
                                                 &lt NUM_OSM ESC   &lt NAV_OSM SPACE  &kp RET       &lt SYM_OSM BSPC  &sk LSHFT
            >;
        };

        nav_osm_layer {
            bindings = <
&kp ESC         &kp TAB         &kp LC(T)        &kp LC(W)         &kp LC(R)          &kp PG_UP     &kp HOME          &kp UP           &kp END         &kp DEL
&sk LGUI        &sk LALT        &sk LCTRL        &sk LSHFT         &kp LC(G)          &kp PG_DN     &kp LEFT          &kp DOWN         &kp RIGHT       &kp SQT
&kp LC(Z)       &kp LC(X)       &kp LC(C)        &kp LC(V)         &kp LC(F)          &kp INS       &kp K_CMENU          &kp PSCRN        &kp SCROLLLOCK  &kp BSLH
                                                 &trans            &trans             &sl WIN_OSM   &trans            &trans
            >;
        };

        num_osm_layer {
            bindings = <
&kp LBKT        &kp N7          &kp N8           &kp N9            &kp RBKT           &kp F12       &kp F7            &kp F8           &kp F9          &kp PSCRN
&kp SQT         &kp N4          &kp N5           &kp N6            &kp EQUAL          &kp F11       &kp F4            &kp F5           &kp F6          &kp SCROLLLOCK
&kp GRAVE       &kp N1          &kp N2           &kp N3            &kp BSLH           &kp F10       &kp F1            &kp F2           &kp F3          &kp PAUSE_BREAK
                                                 &trans            &kp N0             &trans        &kp MINUS         &kp DOT
            >;
        };

        sym_osm_layer {
            bindings = <
&kp LBRC        &kp AMPS        &kp ASTRK        &kp LPAR          &kp RBRC           &arrow_fn     &kp UNDER         &kp PLUS         &kp PIPE        &kp TILDE
&kp DQT         &kp DLLR        &kp PRCNT        &kp CARET         &kp PLUS           &trans        &sk LSHFT         &sk LCTRL        &sk LALT        &sk LGUI
&kp TILDE       &kp EXCL        &kp AT           &kp HASH          &kp PIPE           &console_log  &kp MINUS         &kp EQUAL        &kp COLON       &kp QMARK
                                                 &kp LPAR          &kp UNDER          &trans        &trans            &trans
            >;
        };

        fun_osm_layer {
            bindings = <
&kp F12         &kp F7          &kp F8           &kp F9            &kp PSCRN          &kp C_BRI_UP  &kp C_VOL_UP      &kp C_NEXT       &trans          &sl FUNX_OSM
&kp F11         &kp F4          &kp F5           &kp F6            &kp SCROLLLOCK    &kp C_BRI_DN  &kp C_VOL_DN      &kp C_PREV       &kp C_PP        &trans
&kp F10         &kp F1          &kp F2           &kp F3            &kp PAUSE_BREAK    &trans        &kp C_MUTE        &trans           &trans          &trans
                                                 &kp SPACE         &kp TAB            &trans        &kp DEL           &trans
            >;
        };

        win_osm_layer {
            bindings = <
&kp LG(TAB)     &kp LA(TAB)     &kp LC(LA(TAB))  &kp LC(LG(RIGHT)) &kp LC(LG(D))      &kp LA(LS(TAB)) &kp LG(N7)      &kp LG(N8)       &kp LG(N9)      &win_lock
&kp LG(LEFT)    &kp LG(DOWN)    &kp LG(UP)       &kp LG(RIGHT)     &kp LG(D)          &kp LG(Z)     &kp LG(N4)        &kp LG(N5)       &kp LG(N6)      &win_settings
&win_run        &kp LG(X)       &kp LG(C)        &kp LG(V)         &kp LC(LG(F4))     &kp LG(M)     &kp LG(N1)        &kp LG(N2)       &kp LG(N3)      &kp LG(SEMI)
                                                 &kp LC(LG(LEFT))  &trans             &kp LG(N0)    &trans            &trans
            >;
        };

        funx_layer {
            bindings = <
&kp F24         &kp F19         &kp F20          &kp F21           &kp F22            &kp F23       &teams_mute       &spotify_play_pause &discord_mute &obs_start_stop
&kp F18         &kp F15         &kp F16          &kp F17           &kp F18            &kp F19       &kp F20           &kp F21          &discord_deafen &obs_pause
&kp F13         &kp F14         &kp F15          &kp F16           &kp F17            &kp F18       &kp F19           &kp F20          &kp F21         &kp F22
                                                 &trans            &trans             &trans        &trans            &trans
            >;
        };

        funx_osm_layer {
            bindings = <
&kp F24         &kp F19         &kp F20          &kp F21           &kp F22            &kp F23       &teams_mute       &spotify_play_pause &discord_mute &obs_start_stop
&kp F18         &kp F15         &kp F16          &kp F17           &kp F18            &kp F19       &kp F20           &kp F21          &discord_deafen &obs_pause
&kp F13         &kp F14         &kp F15          &kp F16           &kp F17            &kp F18       &kp F19           &kp F20          &kp F21         &kp F22
                                                 &trans            &trans             &trans        &trans            &trans
            >;
        };

        adj_layer {
            bindings = <
&bootloader     &trans          &trans           &trans            &to BASE           &to BASE_OSM  &trans            &trans           &trans          &bootloader
&bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2      &bt BT_SEL 3       &kp C_BRI_DN  &kp C_BRI_UP      &kp C_VOL_DN     &kp C_VOL_UP    &kp C_MUTE
&sys_reset      &trans          &trans           &trans            &trans             &trans        &trans            &trans           &trans          &sys_reset
                                                 &trans            &trans             &trans        &trans            &trans
            >;
        };
    };
};