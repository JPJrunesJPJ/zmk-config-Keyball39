// Windows management layer
        combo_win_layer {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sl WIN>;
            layers = <BASE NAV NUM SYM FUN FUNX>;
        };

        combo_win_layer_osm {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sl WIN_OSM>;
            layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM>;
        };

        // Enhanced caps word (mirrored)
        combo_caps_l {
            timeout-ms = <50>;
            key-positions = <13 16>;  // F + J (crosses center - keep this one)
            bindings = <&caps_word>;
        };

        // Programming brackets (mirrored on both sides)
        combo_lbkt_l {
            timeout-ms = <30>;
            key-positions = <1 2>;    // W + E (left side)
            bindings = <&kp LBKT>;
        };

        combo_lbkt_r {
            timeout-ms = <30>;
            key-positions = <7 8>;    // I + O (right side mirror)
            bindings = <&kp LBKT>;
        };

        combo_rbkt_l {
            timeout-ms = <30>;
            key-positions = <2 3>;    // E + R (left side)
            bindings = <&kp RBKT>;
        };

        combo_rbkt_r {
            timeout-ms = <30>;
            key-positions = <6 7>;    // U + I (right side mirror)
            bindings = <&kp RBKT>;
        };

        combo_lbrc_l {
            timeout-ms = <30>;
            key-positions = <11 12>;  // S + D (left side)
            bindings = <&kp LBRC>;
        };

        combo_lbrc_r {
            timeout-ms = <30>;
            key-positions = <17 18>;  // K + L (right side mirror)
            bindings = <&kp LBRC>;
        };

        combo_rbrc_l {
            timeout-ms = <30>;
            key-positions = <12 13>;  // D + F (left side)
            bindings = <&kp RBRC>;
        };

        combo_rbrc_r {
            timeout-ms = <30>;
            key-positions = <16 17>;  // J + K (right side mirror)
            bindings = <&kp RBRC>;
        };

        // Alt+Tab shortcuts (mirrored)
        combo_alt_tab_l {
            timeout-ms = <40>;
            key-positions = <1 11>;   // W + S (left side)
            bindings = <&kp LA(TAB)>;
        };

        combo_alt_tab_r {
            timeout-ms = <40>;
            key-positions = <8 18>;   // O + L (right side mirror)
            bindings = <&kp LA(TAB)>;
        };

        combo_alt_shift_tab_l {
            timeout-ms = <40>;
            key-positions = <1 21>;   // W + X (left side)
            bindings = <&kp LA(LS(TAB))>;
        };

        combo_alt_shift_tab_r {
            timeout-ms = <40>;
            key-positions = <8 28>;   // O + dot (right side mirror)
            bindings = <&kp LA(LS(TAB))>;
        };

        // Windows shortcuts (mirrored)
        combo_win_left_l {
            timeout-ms = <50>;
            key-positions = <21 22>;  // X + C (left side)
            bindings = <&kp LG(LEFT)>;
            layers = <NAV NAV_OSM>;
        };

        combo_win_left_r {
            timeout-ms = <50>;
            key-positions = <27 28>;  // comma + dot (right side mirror)
            bindings = <&kp LG(LEFT)>;
            layers = <NAV NAV_OSM>;
        };

        combo_win_right_l {
            timeout-ms = <50>;
            key-positions = <22 23>;  // C + V (left side)
            bindings = <&kp LG(RIGHT)>;
            layers = <NAV NAV_OSM>;
        };

        combo_win_right_r {
            timeout-ms = <50>;
            key-positions = <26 27>;  // M + comma (right side mirror)
            bindings = <&kp LG(RIGHT)>;
            layers = <NAV NAV_OSM>;
        };/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE        0
#define NAV         1
#define NUM         2
#define SYM         3
#define FUN         4
#define FUNX        5  // Extended Function layer (F13-F24)
#define WIN         6  // Windows Management layer
#define BT          7  // Bluetooth Management layer
#define BASE_OSM    8
#define NAV_OSM     9
#define NUM_OSM     10
#define SYM_OSM     11
#define FUN_OSM     12
#define FUNX_OSM    13 // OSM Extended Function layer
#define WIN_OSM     14 // OSM Windows Management layer
#define BT_OSM      15 // OSM Bluetooth layer
#define ADJ         16
#define BASE_MIR    17
#define NAV_MIR     18
#define NUM_MIR     19
#define SYM_MIR     20
#define FUN_MIR     21
#define FUNX_MIR    22
#define WIN_MIR     23
#define BASE_OSM_MIR 24
#define NAV_OSM_MIR  25
#define NUM_OSM_MIR  26
#define SYM_OSM_MIR  27
#define FUN_OSM_MIR  28
#define FUNX_OSM_MIR 29
#define WIN_OSM_MIR  30

// Enhanced behavior configurations
&lt {
    tapping-term-ms = <280>;
    flavor = "balanced";
    quick-tap-ms = <175>;
    global-quick-tap;
};

&mt {
    tapping-term-ms = <280>;
    flavor = "balanced";
    quick-tap-ms = <175>;
    global-quick-tap;
    retro-tap;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word { 
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
    shift-continuation = <UNDERSCORE>;
};

/ {
    combos {
        compatible = "zmk,combos";
        
        // Universal escape
        combo_esc {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };

        // Quick tab access
        combo_tab {
            timeout-ms = <40>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
        };

        // Quick delete
        combo_del {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp DEL>;
        };

        // ═══════════════════════════════════════════════════════════════════════════
        // MIRRORED MOUSE BUTTON COMBOS (work on all layers)
        // ═══════════════════════════════════════════════════════════════════════════

        // Left side mouse combos
        combo_left_click_l {
            timeout-ms = <30>;
            key-positions = <23 24>;  // V + B
            bindings = <&mkp LCLK>;
        };

        combo_right_click_l {
            timeout-ms = <30>;
            key-positions = <24 25>;  // B + N
            bindings = <&mkp RCLK>;
        };

        combo_middle_click_l {
            timeout-ms = <30>;
            key-positions = <23 25>;  // V + N (diagonal)
            bindings = <&mkp MCLK>;
        };

        // Right side mirrored mouse combos
        combo_left_click_r {
            timeout-ms = <30>;
            key-positions = <25 26>;  // N + M (mirror of V + B)
            bindings = <&mkp LCLK>;
        };

        combo_right_click_r {
            timeout-ms = <30>;
            key-positions = <26 27>;  // M + comma (mirror of B + N)
            bindings = <&mkp RCLK>;
        };

        combo_middle_click_r {
            timeout-ms = <30>;
            key-positions = <25 27>;  // N + comma (mirror of V + N diagonal)
            bindings = <&mkp MCLK>;
        };

        // Scroll combos (same-side only)
        combo_scroll_up_l {
            timeout-ms = <40>;
            key-positions = <11 21>;  // S + X (left side)
            bindings = <&msc SCRL_UP>;
        };

        combo_scroll_up_r {
            timeout-ms = <40>;
            key-positions = <18 28>;  // L + dot (right side mirror)
            bindings = <&msc SCRL_UP>;
        };

        combo_scroll_down_l {
            timeout-ms = <40>;
            key-positions = <12 22>;  // D + C (left side)
            bindings = <&msc SCRL_DOWN>;
        };

        combo_scroll_down_r {
            timeout-ms = <40>;
            key-positions = <17 27>;  // K + comma (right side mirror)
            bindings = <&msc SCRL_DOWN>;
        };

        // ═══════════════════════════════════════════════════════════════════════════
        // LAYER ACCESS COMBOS
        // ═══════════════════════════════════════════════════════════════════════════

        // Bluetooth layer access
        combo_bt_layer {
            timeout-ms = <50>;
            key-positions = <4 5>;    // T + Y
            bindings = <&sl BT>;
        };

        combo_bt_layer_osm {
            timeout-ms = <50>;
            key-positions = <4 5>;    // T + Y
            bindings = <&sl BT_OSM>;
            layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM WIN_OSM>;
        };

        // Enhanced caps word
        combo_caps {
            timeout-ms = <50>;
            key-positions = <13 16>;  // F + J
            bindings = <&caps_word>;
        };

        // Programming brackets
        combo_lbkt {
            timeout-ms = <30>;
            key-positions = <1 2>;
            bindings = <&kp LBKT>;
        };

        combo_rbkt {
            timeout-ms = <30>;
            key-positions = <2 3>;
            bindings = <&kp RBKT>;
        };

        combo_lbrc {
            timeout-ms = <30>;
            key-positions = <11 12>;
            bindings = <&kp LBRC>;
        };

        combo_rbrc {
            timeout-ms = <30>;
            key-positions = <12 13>;
            bindings = <&kp RBRC>;
        };

        // Alt+Tab shortcuts
        combo_alt_tab {
            timeout-ms = <40>;
            key-positions = <1 11>;
            bindings = <&kp LA(TAB)>;
        };

        combo_alt_shift_tab {
            timeout-ms = <40>;
            key-positions = <1 21>;
            bindings = <&kp LA(LS(TAB))>;
        };

        // Windows shortcuts
        combo_win_left {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LG(LEFT)>;
            layers = <NAV NAV_OSM>;
        };

        combo_win_right {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LG(RIGHT)>;
            layers = <NAV NAV_OSM>;
        };

        // Extended function keys access
        combo_funx_layer {
            timeout-ms = <50>;
            key-positions = <3 4>;    // R + T
            bindings = <&sl FUNX>;
            layers = <BASE FUN BASE_OSM FUN_OSM>;
        };

        // Windows management layer
        combo_win_layer {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sl WIN>;
            layers = <BASE NAV NUM SYM FUN FUNX>;
        };

        combo_win_layer_osm {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&sl WIN_OSM>;
            layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM>;
        };

        // Adjustment layer
        combo_adj {
            timeout-ms = <50>;
            key-positions = <33 35>;
            bindings = <&mo ADJ>;
        };

        // Mirror layers
        combo_mirror_hrm {
            timeout-ms = <100>;
            key-positions = <31 32>;
            bindings = <&sl BASE_MIR>;
            layers = <BASE NAV NUM SYM FUN FUNX WIN>;
        };

        combo_mirror_osm {
            timeout-ms = <100>;
            key-positions = <32 33>;
            bindings = <&sl BASE_OSM_MIR>;
            layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM WIN_OSM>;
        };

        // Emergency return
        combo_base_return {
            timeout-ms = <100>;
            key-positions = <0 9>;
            bindings = <&to BASE>;
        };
    };

    macros {
        // Programming shortcuts
        arrow_fn: arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE>;
        };

        console_log: console_log {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp S &kp O &kp L &kp E &kp DOT &kp L &kp O &kp G &kp LPAR>;
        };

        // Windows shortcuts
        win_run: win_run {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(R)>;
        };

        win_settings: win_settings {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(I)>;
        };

        win_lock: win_lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>;
        };

        // Application-specific macros for F13-F24
        obs_start_stop: obs_start_stop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F13>;
        };

        obs_pause: obs_pause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F14>;
        };

        discord_mute: discord_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F15>;
        };

        discord_deafen: discord_deafen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F16>;
        };

        spotify_play_pause: spotify_play_pause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F17>;
        };

        teams_mute: teams_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F18>;
        };

        // Mouse precision toggle macro
        mouse_precision: mouse_precision {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F19>;  // F19 for custom mouse precision software
        };

        // Trackball DPI cycle
        dpi_cycle: dpi_cycle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F20>;  // F20 for DPI switching
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base layer with home row mods (LEFT-HANDED OPTIMIZED)
        base_layer {
            bindings = <
&kp Q           &kp W           &kp E            &kp R             &kp T              &kp Y         &kp U             &kp I            &kp O           &kp P
&mt LGUI A      &mt LALT S      &mt LCTRL D      &mt LSHFT F       &kp G              &kp H         &mt RSHFT J       &mt RCTRL K      &mt RALT L      &mt RGUI SEMI
&kp Z           &kp X           &kp C            &kp V             &kp B              &kp N         &kp M             &kp COMMA        &kp DOT         &kp FSLH
&kp LCTRL       &kp LGUI        &kp LALT         &lt NAV SPACE     &lt NUM RET        &none         &lt SYM BSPC      &kp DEL                          &sl FUN
            >;
        };

        nav_layer {
            bindings = <
&kp ESC         &kp TAB         &kp LC(T)        &kp LC(W)         &kp LC(R)          &kp PG_UP     &kp HOME          &kp UP           &kp END         &kp DEL
&sk LGUI        &sk LALT        &sk LCTRL        &sk LSHFT         &kp LC(G)          &kp PG_DN     &kp LEFT          &kp DOWN         &kp RIGHT       &kp SQT
&kp LC(Z)       &kp LC(X)       &kp LC(C)        &kp LC(V)         &kp LC(F)          &mkp LCLK     &mkp MCLK         &mkp RCLK        &dpi_cycle      &mouse_precision
&trans          &trans          &trans           &trans            &trans             &trans        &sl WIN           &trans                           &trans
            >;
        };

        num_layer {
            bindings = <
&kp LBKT        &kp N7          &kp N8           &kp N9            &kp RBKT           &kp F12       &kp F7            &kp F8           &kp F9          &kp PSCRN
&kp SQT         &kp N4          &kp N5           &kp N6            &kp EQUAL          &kp F11       &kp F4            &kp F5           &kp F6          &kp SCRLK
&kp GRAVE       &kp N1          &kp N2           &kp N3            &kp BSLH           &kp F10       &kp F1            &kp F2           &kp F3          &kp PAUSE_BREAK
&trans          &trans          &trans           &kp N0            &kp DOT            &trans        &trans            &kp MINUS                        &trans
            >;
        };

        sym_layer {
            bindings = <
&kp LBRC        &kp AMPS        &kp ASTRK        &kp LPAR          &kp RBRC           &arrow_fn     &kp UNDER         &kp PLUS         &kp PIPE        &kp TILDE
&kp DQT         &kp DLLR        &kp PRCNT        &kp CARET         &kp PLUS           &trans        &sk RSHFT         &sk RCTRL        &sk RALT        &sk RGUI
&kp TILDE       &kp EXCL        &kp AT           &kp HASH          &kp PIPE           &console_log  &kp MINUS         &kp EQUAL        &kp COLON       &kp QMARK
&trans          &trans          &trans           &kp LPAR          &kp UNDER          &trans        &trans            &trans                           &trans
            >;
        };

        fun_layer {
            bindings = <
&kp F12         &kp F7          &kp F8           &kp F9            &kp PSCRN          &kp C_BRI_UP  &kp C_VOL_UP      &kp C_NEXT       &sl FUNX        &trans
&kp F11         &kp F4          &kp F5           &kp F6            &kp SCRLK          &kp C_BRI_DN  &kp C_VOL_DN      &kp C_PREV       &kp C_PP        &trans
&kp F10         &kp F1          &kp F2           &kp F3            &kp PAUSE_BREAK    &trans        &kp C_MUTE        &trans           &trans          &trans
&trans          &trans          &trans           &kp SPACE         &kp TAB            &trans        &trans            &kp DEL                          &trans
            >;
        };

        // Extended Function layer (F13-F24) - HRM version
        funx_layer {
            bindings = <
&kp F24         &kp F19         &kp F20          &kp F21           &kp F22            &obs_start_stop &discord_mute   &spotify_play_pause &teams_mute   &kp F23
&kp F18         &kp F15         &kp F16          &kp F17           &kp F22            &obs_pause    &discord_deafen   &kp F20          &kp F21         &kp F22
&kp F13         &kp F14         &kp F15          &kp F16           &kp F17            &kp F18       &kp F19           &kp F20          &kp F21         &kp F22
&trans          &trans          &trans           &trans            &trans             &trans        &kp F23           &kp F24                          &trans
            >;
        };

        win_layer {
            bindings = <
&kp LG(TAB)     &kp LA(TAB)     &kp LC(LA(TAB))  &kp LC(LG(RIGHT)) &kp LC(LG(D))      &kp LA(LS(TAB)) &kp LG(N7)      &kp LG(N8)       &kp LG(N9)      &win_lock
&kp LG(LEFT)    &kp LG(DOWN)    &kp LG(UP)       &kp LG(RIGHT)     &kp LG(D)          &kp LG(Z)     &kp LG(N4)        &kp LG(N5)       &kp LG(N6)      &win_settings
&win_run        &kp LG(X)       &kp LG(C)        &kp LG(V)         &kp LC(LG(F4))     &kp LG(M)     &kp LG(N1)        &kp LG(N2)       &kp LG(N3)      &kp LG(SEMI)
&trans          &trans          &trans           &kp LC(LG(LEFT))  &trans             &trans        &kp LG(N0)        &trans                           &trans
            >;
        };

        // Bluetooth Management layer - HRM version
        bt_layer {
            bindings = <
&bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2      &bt BT_SEL 3       &bt BT_SEL 4  &bt BT_NXT        &bt BT_PRV       &trans          &trans
&trans          &trans          &trans           &trans            &trans             &trans        &trans            &trans           &trans          &trans
&trans          &trans          &trans           &trans            &trans             &trans        &trans            &trans           &trans          &trans
&trans          &trans          &trans           &trans            &trans             &trans        &trans            &trans                           &trans
            >;
        };

        base_osm_layer {
            bindings = <
&kp Q           &kp W           &kp E            &kp R             &kp T              &kp Y         &kp U             &kp I            &kp O           &kp P
&kp A           &kp S           &kp D            &kp F             &kp G              &kp H         &kp J             &kp K            &kp L           &kp SEMI
&kp Z           &kp X           &kp C            &kp V             &kp B              &kp N         &kp M             &kp COMMA        &kp DOT         &kp FSLH
&kp LCTRL       &kp LGUI        &kp LALT         &lt NAV_OSM SPACE &lt NUM_OSM RET    &none         &lt SYM_OSM BSPC  &kp DEL                          &sk LSHFT
            >;
        };

        nav_osm_layer {
            bindings = <
&kp ESC         &kp TAB         &kp LC(T)        &kp LC(W)         &kp LC(R)          &kp PG_UP     &kp HOME          &kp UP           &kp END         &kp DEL
&sk LGUI        &sk LALT        &sk LCTRL        &sk LSHFT         &kp LC(G)          &kp PG_DN     &kp LEFT          &kp DOWN         &kp RIGHT       &kp SQT
&kp LC(Z)       &kp LC(X)       &kp LC(C)        &kp LC(V)         &kp LC(F)          &mkp LCLK     &mkp MCLK         &mkp RCLK        &dpi_cycle      &mouse_precision
&trans          &trans          &trans           &trans            &trans             &trans        &sl WIN_OSM       &trans                           &trans
            >;
        };

        num_osm_layer {
            bindings = <
&kp LBKT        &kp N7          &kp N8           &kp N9            &kp RBKT           &kp F12       &kp F7            &kp F8           &kp F9          &kp PSCRN
&kp SQT         &kp N4          &kp N5           &kp N6            &kp EQUAL          &kp F11       &kp F4            &kp F5           &kp F6          &kp SCRLK
&kp GRAVE       &kp N1          &kp N2           &kp N3            &kp BSLH           &kp F10       &kp F1            &kp F2           &kp F3          &kp PAUSE_BREAK
&trans          &trans          &trans           &trans            &kp N0             &trans        &trans            &kp MINUS                        &kp DOT
            >;
        };

        sym_osm_layer {
            bindings = <
&kp LBRC        &kp AMPS        &kp ASTRK        &kp LPAR          &kp RBRC           &arrow_fn     &kp UNDER         &kp PLUS         &kp PIPE        &kp TILDE
&kp DQT         &kp DLLR        &kp PRCNT        &kp CARET         &kp PLUS           &trans        &sk LSHFT         &sk LCTRL        &sk LALT        &sk LGUI
&kp TILDE       &kp EXCL        &kp AT           &kp HASH          &kp PIPE           &console_log  &kp MINUS         &kp EQUAL        &kp COLON       &kp QMARK
&trans          &trans          &trans           &kp LPAR          &kp UNDER          &trans        &trans            &trans                           &trans
            >;
        };

        fun_osm_layer {
            bindings = <
&kp F12         &kp F7          &kp F8           &kp F9            &kp PSCRN          &kp C_BRI_UP  &kp C_VOL_UP      &kp C_NEXT       &sl FUNX_OSM    &trans
&kp F11         &kp F4          &kp F5           &kp F6            &kp SCRLK          &kp C_BRI_DN  &kp C_VOL_DN      &kp C_PREV       &kp C_PP        &trans
&kp F10         &kp F1          &kp F2           &kp F3            &kp PAUSE_BREAK    &trans        &kp C_MUTE        &trans           &trans          &trans
&trans          &trans          &trans           &kp SPACE         &kp TAB            &trans        &trans            &kp DEL                          &trans
            >;
        };

        // Extended Function layer (F13-F24) - OSM version
        funx_osm_layer {
            bindings = <
&kp F24         &kp F19         &kp F20          &kp F21           &kp F22            &obs_start_stop &discord_mute   &spotify_play_pause &teams_mute   &kp F23
&kp F18         &kp F15         &kp F16          &kp F17           &kp F22            &obs_pause    &discord_deafen   &kp F20          &kp F21         &kp F22
&kp F13         &kp F14         &kp F15          &kp F16           &kp F17            &kp F18       &kp F19           &kp F20          &kp F21         &kp F22
&trans          &trans          &trans           &trans            &trans             &trans        &kp F23           &kp F24                          &trans
            >;
        };

        win_osm_layer {
            bindings = <
&kp LG(TAB)     &kp LA(TAB)     &kp LC(LA(TAB))  &kp LC(LG(RIGHT)) &kp LC(LG(D))      &kp LA(LS(TAB)) &kp LG(N7)      &kp LG(N8)       &kp LG(N9)      &win_lock
&kp LG(LEFT)    &kp LG(DOWN)    &kp LG(UP)       &kp LG(RIGHT)     &kp LG(D)          &kp LG(Z)     &kp LG(N4)        &kp LG(N5)       &kp LG(N6)      &win_settings
&win_run        &kp LG(X)       &kp LG(C)        &kp LG(V)         &kp LC(LG(F4))     &kp LG(M)     &kp LG(N1)        &kp LG(N2)       &kp LG(N3)      &kp LG(SEMI)
&trans          &trans          &trans           &kp LC(LG(LEFT))  &trans             &trans        &kp LG(N0)        &trans                           &trans
            >;
        };

        // Bluetooth Management layer - OSM version
        bt_osm_layer {
            bindings = <
&bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2      &bt BT_SEL 3       &bt BT_SEL 4  &bt BT_NXT        &bt BT_PRV       &trans          &trans
&trans          &trans          &trans           &trans            &trans             &trans        &trans            &trans           &trans          &trans
&trans          &trans          &trans           &trans            &trans             &trans        &trans            &trans           &trans          &trans
&trans          &trans          &trans           &trans            &trans             &trans        &trans            &trans                           &trans
            >;
        };

        nav_osm_layer {
            bindings = <
&kp ESC         &kp TAB         &kp LC(T)        &kp LC(W)         &kp LC(R)          &kp PG_UP     &kp HOME          &kp UP           &kp END         &kp DEL
&sk LGUI        &sk LALT        &sk LCTRL        &sk LSHFT         &kp LC(G)          &kp PG_DN     &kp LEFT          &kp DOWN         &kp RIGHT       &kp SQT
&kp LC(Z)       &kp LC(X)       &kp LC(C)        &kp LC(V)         &kp LC(F)          &mkp LCLK     &mkp MCLK         &mkp RCLK        &dpi_cycle      &mouse_precision
&trans          &trans          &trans           &trans            &trans             &trans        &sl WIN_OSM       &trans                           &trans
            >;
        };

        num_osm_layer {
            bindings = <
&kp LBKT        &kp N7          &kp N8           &kp N9            &kp RBKT           &kp F12       &kp F7            &kp F8           &kp F9          &kp PSCRN
&kp SQT         &kp N4          &kp N5           &kp N6            &kp EQUAL          &kp F11       &kp F4            &kp F5           &kp F6          &kp SCRLK
&kp GRAVE       &kp N1          &kp N2           &kp N3            &kp BSLH           &kp F10       &kp F1            &kp F2           &kp F3          &kp PAUSE_BREAK
&trans          &trans          &trans           &kp N0            &kp DOT            &trans        &trans            &kp MINUS                        &trans
            >;
        };

        sym_osm_layer {
            bindings = <
&kp LBRC        &kp AMPS        &kp ASTRK        &kp LPAR          &kp RBRC           &arrow_fn     &kp UNDER         &kp PLUS         &kp PIPE        &kp TILDE
&kp DQT         &kp DLLR        &kp PRCNT        &kp CARET         &kp PLUS           &trans        &sk LSHFT         &sk LCTRL        &sk LALT        &sk LGUI
&kp TILDE       &kp EXCL        &kp AT           &kp HASH          &kp PIPE           &console_log  &kp MINUS         &kp EQUAL        &kp COLON       &kp QMARK
&trans          &trans          &trans           &kp LPAR          &kp UNDER          &trans        &trans            &trans                           &trans
            >;
        };

        fun_osm_layer {
            bindings = <
&kp F12         &kp F7          &kp F8           &kp F9            &kp PSCRN          &kp C_BRI_UP  &kp C_VOL_UP      &kp C_NEXT       &sl FUNX_OSM    &trans
&kp F11         &kp F4          &kp F5           &kp F6            &kp SCRLK          &kp C_BRI_DN  &kp C_VOL_DN      &kp C_PREV       &kp C_PP        &trans
&kp F10         &kp F1          &kp F2           &kp F3            &kp PAUSE_BREAK    &trans        &kp C_MUTE        &trans           &trans          &trans
&trans          &trans          &trans           &kp SPACE         &kp TAB            &trans        &trans            &kp DEL                          &trans
            >;
        };

        // Extended Function layer (F13-F24) - OSM version
        funx_osm_layer {
            bindings = <
&kp F24         &kp F19         &kp F20          &kp F21           &kp F22            &obs_start_stop &discord_mute   &spotify_play_pause &teams_mute   &kp F23
&kp F18         &kp F15         &kp F16          &kp F17           &kp F22            &obs_pause    &discord_deafen   &kp F20          &kp F21         &kp F22
&kp F13         &kp F14         &kp F15          &kp F16           &kp F17            &kp F18       &kp F19           &kp F20          &kp F21         &kp F22
&trans          &trans          &trans           &trans            &trans             &trans        &kp F23           &kp F24                          &trans
            >;
        };

        win_osm_layer {
            bindings = <
&kp LG(TAB)     &kp LA(TAB)     &kp LC(LA(TAB))  &kp LC(LG(RIGHT)) &kp LC(LG(D))      &kp LA(LS(TAB)) &kp LG(N7)      &kp LG(N8)       &kp LG(N9)      &win_lock
&kp LG(LEFT)    &kp LG(DOWN)    &kp LG(UP)       &kp LG(RIGHT)     &kp LG(D)          &kp LG(Z)     &kp LG(N4)        &kp LG(N5)       &kp LG(N6)      &win_settings
&win_run        &kp LG(X)       &kp LG(C)        &kp LG(V)         &kp LC(LG(F4))     &kp LG(M)     &kp LG(N1)        &kp LG(N2)       &kp LG(N3)      &kp LG(SEMI)
&trans          &trans          &trans           &kp LC(LG(LEFT))  &trans             &trans        &kp LG(N0)        &trans                           &trans
            >;
        };

        adj_layer {
            bindings = <
&bootloader     &to BASE        &to BASE_OSM     &trans            &trans             &trans        &trans            &trans           &trans          &bootloader
&dpi_cycle      &mouse_precision &trans          &trans            &trans             &kp C_BRI_DN  &kp C_BRI_UP      &kp C_VOL_DN     &kp C_VOL_UP    &kp C_MUTE
&sys_reset      &mkp LCLK       &mkp MCLK        &mkp RCLK         &trans             &msc SCRL_UP  &msc SCRL_DOWN    &msc SCRL_LEFT   &msc SCRL_RIGHT &sys_reset
&trans          &trans          &trans           &sl BT            &sl BT_OSM         &trans        &trans            &trans                           &trans
            >;
        };

        // Core mirror layers
        base_mir_layer {
            bindings = <
&kp P           &kp O           &kp I            &kp U             &kp Y              &kp T         &kp R             &kp E            &kp W           &kp Q
&mt RGUI SEMI   &mt RALT L      &mt RCTRL K      &mt RSHFT J       &kp H              &kp G         &mt LSHFT F       &mt LCTRL D      &mt LALT S      &mt LGUI A
&kp FSLH        &kp DOT         &kp COMMA        &kp M             &kp N              &kp B         &kp V             &kp C            &kp X           &kp Z
&sl FUN_MIR     &kp DEL         &lt SYM_MIR BSPC &none             &lt NUM_MIR RET    &lt NAV_MIR SPACE &kp LALT        &kp LGUI                         &kp LCTRL
            >;
        };

        nav_mir_layer {
            bindings = <
&kp DEL         &kp END         &kp UP           &kp HOME          &kp PG_UP          &kp LC(R)     &kp LC(W)         &kp LC(T)        &kp TAB         &kp ESC
&kp SQT         &kp RIGHT       &kp DOWN         &kp LEFT          &kp PG_DN          &kp LC(G)     &sk LSHFT         &sk LCTRL        &sk LALT        &sk LGUI
&mouse_precision &dpi_cycle     &mkp RCLK        &mkp MCLK         &mkp LCLK          &kp LC(F)     &kp LC(V)         &kp LC(C)        &kp LC(X)       &kp LC(Z)
&trans          &trans          &sl WIN_MIR      &trans            &trans             &trans        &trans            &trans                           &trans
            >;
        };

        nav_mir_layer {
            bindings = <
&kp DEL         &kp END         &kp UP           &kp HOME          &kp PG_UP          &kp LC(R)     &kp LC(W)         &kp LC(T)        &kp TAB         &kp ESC
&kp SQT         &kp RIGHT       &kp DOWN         &kp LEFT          &kp PG_DN          &kp LC(G)     &sk LSHFT         &sk LCTRL        &sk LALT        &sk LGUI
&mouse_precision &dpi_cycle     &mkp RCLK        &mkp MCLK         &mkp LCLK          &kp LC(F)     &kp LC(V)         &kp LC(C)        &kp LC(X)       &kp LC(Z)
&trans          &trans          &sl WIN_MIR      &trans            &trans             &trans        &trans            &trans                           &trans
            >;
        };

        num_mir_layer {
            bindings = <
&kp PSCRN       &kp F9          &kp F8           &kp F7            &kp F12            &kp RBKT      &kp N9            &kp N8           &kp N7          &kp LBKT
&kp SCRLK       &kp F6          &kp F5           &kp F4            &kp F11            &kp EQUAL     &kp N6            &kp N5           &kp N4          &kp SQT
&kp PAUSE_BREAK &kp F3          &kp F2           &kp F1            &kp F10            &kp BSLH      &kp N3            &kp N2           &kp N1          &kp GRAVE
&trans          &kp MINUS       &trans           &trans            &kp DOT            &kp N0        &trans            &trans                           &trans
            >;
        };

        sym_mir_layer {
            bindings = <
&kp TILDE       &kp PIPE        &kp PLUS         &kp UNDER         &arrow_fn          &kp RBRC      &kp LPAR          &kp ASTRK        &kp AMPS        &kp LBRC
&sk RGUI        &sk RALT        &sk RCTRL        &sk RSHFT         &trans             &kp PLUS      &kp CARET         &kp PRCNT        &kp DLLR        &kp DQT
&kp QMARK       &kp COLON       &kp EQUAL        &kp MINUS         &console_log       &kp PIPE      &kp HASH          &kp AT           &kp EXCL        &kp TILDE
&trans          &trans          &trans           &trans            &kp UNDER          &kp LPAR      &trans            &trans                           &trans
            >;
        };

        fun_mir_layer {
            bindings = <
&trans          &sl FUNX_MIR    &kp C_NEXT       &kp C_VOL_UP      &kp C_BRI_UP       &kp PSCRN     &kp F9            &kp F8           &kp F7          &kp F12
&trans          &kp C_PP        &kp C_PREV       &kp C_VOL_DN      &kp C_BRI_DN       &kp SCRLK     &kp F6            &kp F5           &kp F4          &kp F11
&trans          &trans          &trans           &kp C_MUTE        &trans             &kp PAUSE_BREAK &kp F3          &kp F2           &kp F1          &kp F10
&trans          &kp DEL         &trans           &trans            &kp TAB            &kp SPACE     &trans            &trans                           &trans
            >;
        };

        // Extended Function mirror layer
        funx_mir_layer {
            bindings = <
&kp F23         &teams_mute     &spotify_play_pause &discord_mute   &obs_start_stop    &kp F22       &kp F21           &kp F20          &kp F19         &kp F24
&kp F22         &kp F21         &kp F20          &discord_deafen   &obs_pause         &kp F22       &kp F17           &kp F16          &kp F15         &kp F18
&kp F22         &kp F21         &kp F20          &kp F19           &kp F18            &kp F17       &kp F16           &kp F15          &kp F14         &kp F13
&trans          &kp F24         &kp F23          &trans            &trans             &trans        &trans            &trans                           &trans
            >;
        };

        win_mir_layer {
            bindings = <
&win_lock       &kp LG(N9)      &kp LG(N8)       &kp LG(N7)        &kp LA(LS(TAB))    &kp LC(LG(D)) &kp LC(LG(RIGHT)) &kp LC(LA(TAB))  &kp LA(TAB)     &kp LG(TAB)
&win_settings   &kp LG(N6)      &kp LG(N5)       &kp LG(N4)        &kp LG(Z)          &kp LG(D)     &kp LG(RIGHT)     &kp LG(UP)       &kp LG(DOWN)    &kp LG(LEFT)
&kp LG(SEMI)    &kp LG(N3)      &kp LG(N2)       &kp LG(N1)        &kp LG(M)          &kp LC(LG(F4)) &kp LG(V)        &kp LG(C)        &kp LG(X)       &win_run
&trans          &trans          &kp LG(N0)       &trans            &trans             &kp LC(LG(LEFT)) &trans         &trans                           &trans
            >;
        };

        nav_osm_mir_layer {
            bindings = <
&kp DEL         &kp END         &kp UP           &kp HOME          &kp PG_UP          &kp LC(R)     &kp LC(W)         &kp LC(T)        &kp TAB         &kp ESC
&kp SQT         &kp RIGHT       &kp DOWN         &kp LEFT          &kp PG_DN          &kp LC(G)     &sk LSHFT         &sk LCTRL        &sk LALT        &sk LGUI
&mouse_precision &dpi_cycle     &mkp RCLK        &mkp MCLK         &mkp LCLK          &kp LC(F)     &kp LC(V)         &kp LC(C)        &kp LC(X)       &kp LC(Z)
&trans          &trans          &sl WIN_OSM_MIR  &trans            &trans             &trans        &trans            &trans                           &trans
            >;
        };

        num_osm_mir_layer {
            bindings = <
&kp PSCRN       &kp F9          &kp F8           &kp F7            &kp F12            &kp RBKT      &kp N9            &kp N8           &kp N7          &kp LBKT
&kp SCRLK       &kp F6          &kp F5           &kp F4            &kp F11            &kp EQUAL     &kp N6            &kp N5           &kp N4          &kp SQT
&kp PAUSE_BREAK &kp F3          &kp F2           &kp F1            &kp F10            &kp BSLH      &kp N3            &kp N2           &kp N1          &kp GRAVE
&kp DOT         &kp MINUS       &trans           &trans            &kp N0             &trans        &trans            &trans                           &trans
            >;
        };

        sym_osm_mir_layer {
            bindings = <
&kp TILDE       &kp PIPE        &kp PLUS         &kp UNDER         &arrow_fn          &kp RBRC      &kp LPAR          &kp ASTRK        &kp AMPS        &kp LBRC
&sk LGUI        &sk LALT        &sk LCTRL        &sk LSHFT         &trans             &kp PLUS      &kp CARET         &kp PRCNT        &kp DLLR        &kp DQT
&kp QMARK       &kp COLON       &kp EQUAL        &kp MINUS         &console_log       &kp PIPE      &kp HASH          &kp AT           &kp EXCL        &kp TILDE
&trans          &trans          &trans           &trans            &kp UNDER          &kp LPAR      &trans            &trans                           &trans
            >;
        };

        fun_osm_mir_layer {
            bindings = <
&trans          &sl FUNX_OSM_MIR &kp C_NEXT      &kp C_VOL_UP      &kp C_BRI_UP       &kp PSCRN     &kp F9            &kp F8           &kp F7          &kp F12
&trans          &kp C_PP        &kp C_PREV       &kp C_VOL_DN      &kp C_BRI_DN       &kp SCRLK     &kp F6            &kp F5           &kp F4          &kp F11
&trans          &trans          &trans           &kp C_MUTE        &trans             &kp PAUSE_BREAK &kp F3          &kp F2           &kp F1          &kp F10
&trans          &kp DEL         &trans           &trans            &kp TAB            &kp SPACE     &trans            &trans                           &trans
            >;
        };

        funx_osm_mir_layer {
            bindings = <
&kp F23         &teams_mute     &spotify_play_pause &discord_mute   &obs_start_stop    &kp F22       &kp F21           &kp F20          &kp F19         &kp F24
&kp F22         &kp F21         &kp F20          &discord_deafen   &obs_pause         &kp F22       &kp F17           &kp F16          &kp F15         &kp F18
&kp F22         &kp F21         &kp F20          &kp F19           &kp F18            &kp F17       &kp F16           &kp F15          &kp F14         &kp F13
&trans          &kp F24         &kp F23          &trans            &trans             &trans        &trans            &trans                           &trans
            >;
        };

        win_osm_mir_layer {
            bindings = <
&win_lock       &kp LG(N9)      &kp LG(N8)       &kp LG(N7)        &kp LA(LS(TAB))    &kp LC(LG(D)) &kp LC(LG(RIGHT)) &kp LC(LA(TAB))  &kp LA(TAB)     &kp LG(TAB)
&win_settings   &kp LG(N6)      &kp LG(N5)       &kp LG(N4)        &kp LG(Z)          &kp LG(D)     &kp LG(RIGHT)     &kp LG(UP)       &kp LG(DOWN)    &kp LG(LEFT)
&kp LG(SEMI)    &kp LG(N3)      &kp LG(N2)       &kp LG(N1)        &kp LG(M)          &kp LC(LG(F4)) &kp LG(V)        &kp LG(C)        &kp LG(X)       &win_run
&trans          &trans          &kp LG(N0)       &trans            &trans             &kp LC(LG(LEFT)) &trans         &trans                           &trans
            >;
        };
    };
};