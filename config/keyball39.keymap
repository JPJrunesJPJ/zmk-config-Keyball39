combos {
    compatible = "zmk,combos";

    // ═══════════════════════════════════════════════════════════════════════════
    // UNIVERSAL COMBOS (keep existing - they work well)
    // ═══════════════════════════════════════════════════════════════════════════

    combo_esc {
        timeout-ms = <40>;
        key-positions = <16 17>;
        bindings = <&kp ESC>;
    };

    combo_tab {
        timeout-ms = <40>;
        key-positions = <0 1>;
        bindings = <&kp TAB>;
    };

    combo_del {
        timeout-ms = <40>;
        key-positions = <7 8>;
        bindings = <&kp DEL>;
    };

    // ═══════════════════════════════════════════════════════════════════════════
    // MOUSE COMBOS - KEEP EXISTING (well-designed for split keyboard)
    // ═══════════════════════════════════════════════════════════════════════════

    combo_left_click_l {
        timeout-ms = <30>;
        key-positions = <23 24>;  // V + B
        bindings = <&mkp LCLK>;
    };

    combo_right_click_l {
        timeout-ms = <30>;
        key-positions = <24 25>;  // B + N
        bindings = <&mkp RCLK>;
    };

    combo_middle_click_l {
        timeout-ms = <30>;
        key-positions = <23 25>;  // V + N (diagonal - keep existing)
        bindings = <&mkp MCLK>;
    };

    combo_left_click_r {
        timeout-ms = <30>;
        key-positions = <25 26>;  // N + M
        bindings = <&mkp LCLK>;
    };

    combo_right_click_r {
        timeout-ms = <30>;
        key-positions = <26 27>;  // M + comma
        bindings = <&mkp RCLK>;
    };

    combo_middle_click_r {
        timeout-ms = <30>;
        key-positions = <25 27>;  // N + comma (diagonal - keep existing)
        bindings = <&mkp MCLK>;
    };

    combo_scroll_up_l {
        timeout-ms = <40>;
        key-positions = <11 21>;  // S + X
        bindings = <&msc SCRL_UP>;
    };

    combo_scroll_up_r {
        timeout-ms = <40>;
        key-positions = <18 28>;  // L + dot
        bindings = <&msc SCRL_UP>;
    };

    combo_scroll_down_l {
        timeout-ms = <40>;
        key-positions = <12 22>;  // D + C
        bindings = <&msc SCRL_DOWN>;
    };

    combo_scroll_down_r {
        timeout-ms = <40>;
        key-positions = <17 27>;  // K + comma
        bindings = <&msc SCRL_DOWN>;
    };

    // ═══════════════════════════════════════════════════════════════════════════
    // IMPROVED PROGRAMMING COMBOS - BILATERAL ACCESS
    // ═══════════════════════════════════════════════════════════════════════════

    // Replace awkward bracket combos with comfortable parentheses
    combo_lpar_left {
        timeout-ms = <30>;
        key-positions = <13 14>;  // F + G
        bindings = <&kp LPAR>;
    };

    combo_rpar_left {
        timeout-ms = <30>;
        key-positions = <14 15>;  // G + H  
        bindings = <&kp RPAR>;
    };

    combo_lpar_right {
        timeout-ms = <30>;
        key-positions = <15 16>;  // H + J
        bindings = <&kp LPAR>;
    };

    combo_rpar_right {
        timeout-ms = <30>;
        key-positions = <16 17>;  // J + K
        bindings = <&kp RPAR>;
    };

    // Keep brackets but in more comfortable positions
    combo_lbkt_left {
        timeout-ms = <30>;
        key-positions = <12 13>;  // D + F
        bindings = <&kp LBKT>;
    };

    combo_rbkt_left {
        timeout-ms = <30>;
        key-positions = <13 15>;  // F + H (skip G)
        bindings = <&kp RBKT>;
    };

    combo_lbkt_right {
        timeout-ms = <30>;
        key-positions = <15 17>;  // H + K (skip J)
        bindings = <&kp LBKT>;
    };

    combo_rbkt_right {
        timeout-ms = <30>;
        key-positions = <17 18>;  // K + L
        bindings = <&kp RBKT>;
    };

    // Braces using vertical positions (non-conflicting)
    combo_lbrc_left {
        timeout-ms = <30>;
        key-positions = <11 12>;  // S + D
        bindings = <&kp LBRC>;
    };

    combo_rbrc_left {
        timeout-ms = <30>;
        key-positions = <12 14>;  // D + G (skip F)
        bindings = <&kp RBRC>;
    };

    combo_lbrc_right {
        timeout-ms = <30>;
        key-positions = <15 18>;  // H + L (skip J/K)
        bindings = <&kp LBRC>;
    };

    combo_rbrc_right {
        timeout-ms = <30>;
        key-positions = <17 19>;  // K + ;
        bindings = <&kp RBRC>;
    };

    // Programming symbols - using non-conflicting positions
    combo_underscore_left {
        timeout-ms = <30>;
        key-positions = <21 22>;  // X + C
        bindings = <&kp UNDER>;
    };

    combo_underscore_right {
        timeout-ms = <30>;
        key-positions = <27 28>;  // comma + dot
        bindings = <&kp UNDER>;
    };

    combo_arrow_fn_left {
        timeout-ms = <30>;
        key-positions = <22 23>;  // C + V
        bindings = <&arrow_fn>;
    };

    combo_arrow_fn_right {
        timeout-ms = <30>;
        key-positions = <26 28>;  // M + dot (skip comma)
        bindings = <&arrow_fn>;
    };

    combo_equal_equal_left {
        timeout-ms = <30>;
        key-positions = <20 21>;  // Z + X
        bindings = <&kp EQUAL &kp EQUAL>;
    };

    combo_equal_equal_right {
        timeout-ms = <30>;
        key-positions = <28 29>;  // dot + slash
        bindings = <&kp EQUAL &kp EQUAL>;
    };

    // ═══════════════════════════════════════════════════════════════════════════
    // BILATERAL NAVIGATION SHORTCUTS
    // ═══════════════════════════════════════════════════════════════════════════

    // Alt+Tab - keep left, add right
    combo_alt_tab_left {
        timeout-ms = <40>;
        key-positions = <1 11>;   // W + S (existing)
        bindings = <&kp LA(TAB)>;
    };

    combo_alt_tab_right {
        timeout-ms = <40>;
        key-positions = <8 18>;   // I + L
        bindings = <&kp LA(TAB)>;
    };

    // Alt+Shift+Tab
    combo_alt_shift_tab_left {
        timeout-ms = <40>;
        key-positions = <1 21>;   // W + X (existing)
        bindings = <&kp LA(LS(TAB))>;
    };

    combo_alt_shift_tab_right {
        timeout-ms = <40>;
        key-positions = <8 28>;   // I + dot
        bindings = <&kp LA(LS(TAB))>;
    };

    // Common Ctrl shortcuts
    combo_ctrl_a_left {
        timeout-ms = <40>;
        key-positions = <0 10>;   // Q + A
        bindings = <&kp LC(A)>;
    };

    combo_ctrl_a_right {
        timeout-ms = <40>;
        key-positions = <9 19>;   // P + ;
        bindings = <&kp LC(A)>;
    };

    combo_ctrl_s_left {
        timeout-ms = <40>;
        key-positions = <10 11>;  // A + S
        bindings = <&kp LC(S)>;
    };

    combo_ctrl_s_right {
        timeout-ms = <40>;
        key-positions = <18 19>;  // L + ;
        bindings = <&kp LC(S)>;
    };

    // ═══════════════════════════════════════════════════════════════════════════
    // LAYER ACCESS - KEEP WORKING ONES, IMPROVE TIMING
    // ═══════════════════════════════════════════════════════════════════════════

    combo_bt_layer {
        timeout-ms = <50>;
        key-positions = <4 5>;    // T + Y (existing)
        bindings = <&sl BT>;
    };

    combo_bt_layer_osm {
        timeout-ms = <50>;
        key-positions = <4 5>;
        bindings = <&sl BT_OSM>;
        layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM WIN_OSM>;
    };

    combo_caps {
        timeout-ms = <50>;
        key-positions = <13 16>;  // F + J (existing)
        bindings = <&caps_word>;
    };

    combo_funx_layer {
        timeout-ms = <50>;
        key-positions = <3 4>;    // R + T (existing)
        bindings = <&sl FUNX>;
        layers = <BASE FUN BASE_OSM FUN_OSM>;
    };

    combo_win_layer {
        timeout-ms = <50>;
        key-positions = <30 31>;  // Thumb cluster
        bindings = <&sl WIN>;
        layers = <BASE NAV NUM SYM FUN FUNX>;
    };

    combo_win_layer_osm {
        timeout-ms = <50>;
        key-positions = <30 31>;
        bindings = <&sl WIN_OSM>;
        layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM>;
    };

    combo_adj {
        timeout-ms = <50>;
        key-positions = <33 35>;  // Right thumb cluster
        bindings = <&mo ADJ>;
    };

    combo_mirror_hrm {
        timeout-ms = <100>;
        key-positions = <31 32>;  // Thumb cluster
        bindings = <&sl BASE_MIR>;
        layers = <BASE NAV NUM SYM FUN FUNX WIN>;
    };

    combo_mirror_osm {
        timeout-ms = <100>;
        key-positions = <32 33>;  // Thumb cluster
        bindings = <&sl BASE_OSM_MIR>;
        layers = <BASE_OSM NAV_OSM NUM_OSM SYM_OSM FUN_OSM FUNX_OSM WIN_OSM>;
    };

    combo_base_return {
        timeout-ms = <100>;
        key-positions = <0 9>;    // Q + P (emergency)
        bindings = <&to BASE>;
    };
};